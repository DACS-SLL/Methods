class Date
instance variables
  year : nat;
  month : nat;
  day : nat;

inv 
  year > 0 and
  month >= 1 and month <= 12 and
  day >= 1 and day <= DaysInMonth(year, month);

operations
  -- Constructor para Date
  public Date: nat * nat * nat ==> Date
  Date(y, m, d) ==
  (
    year := y;
    month := m;
    day := d
  )
pre y > 0 and m >= 1 and m <= 12 and d >= 1 and d <= DaysInMonth(y, m);

  -- Calcular la cantidad de días en un mes específico
  private DaysInMonth: nat * nat ==> nat
  DaysInMonth(y, m) ==
    if m in set {1, 3, 5, 7, 8, 10, 12} then return 31
    elseif m in set {4, 6, 9, 11} then return 30
    elseif m = 2 then
      if (y mod 4 = 0 and y mod 100 <> 0) or y mod 400 = 0 then return 29
      else return 28
    else return 0;
end Date

class Time
instance variables
  hour : nat;
  minute : nat;
  second : nat;

inv
  hour >= 0 and hour < 24 and
  minute >= 0 and minute < 60 and
  second >= 0 and second < 60;

operations
  -- Constructor para Time
  public Time: nat * nat * nat ==> Time
  Time(h, m, s) ==
  (
    hour := h;
    minute := m;
    second := s
  )
pre h >= 0 and h < 24 and m >= 0 and m < 60 and s >= 0 and s < 60;

  -- Getter para la hora
  public GetHour: () ==> nat
  GetHour() ==
    return hour;

  -- Getter para el minuto
  public GetMinute: () ==> nat
  GetMinute() ==
    return minute;

  -- Getter para el segundo
  public GetSecond: () ==> nat
  GetSecond() ==
    return second;
end Time

class Mensaje
instance variables
  id_msg : nat := 0;
  emisor : seq1 of char  := ['a'];
  receptor : seq1 of char  := ['a'];
  contenido : seq1 of char  := ['a'];
  fecha : Date;
  hora : Time ;
  verificado : bool := false;

operations

 public Mensaje: nat * seq1 of char * seq1 of char * seq1 of char * Date * Time * bool ==> Mensaje
 Mensaje(id_m, emi, rec, cont, f, h, ver) ==
 (
    id_msg := id_m;
    emisor := emi;
    receptor := rec;
    contenido := cont;
    fecha := f;
    hora := h;
    verificado := ver
 )
 pre len cont > 0 and len emi > 0 and len rec > 0;  -- Validar que emisor y receptor no sean vacíos

  public ContienePalabraClave: seq of char ==> bool
  ContienePalabraClave(palabra) ==
  (
      return len palabra <= len contenido and
            exists i in set inds contenido & 
            i + len palabra - 1 <= len contenido and
            forall j in set {1, ..., len palabra} &
            contenido(i + j - 1) = palabra(j);
  );


  -- Marcar el mensaje como verificado
  public MarcarVerificado: () ==> ()
  MarcarVerificado() ==
    verificado := true;

  -- Analizar sentido del mensaje (positivo-negativo)
  public AnalizarSentimiento: () ==> seq1 of char
  AnalizarSentimiento() ==
    return if exists palabra in set {"feliz", "alegre", "contento"} & ContienePalabraClave(palabra)
           then "Positivo"
           elseif exists palabra in set {"triste", "enojado", "molesto"} & ContienePalabraClave(palabra)
           then "Negativo"
           else "Neutral";

  public CifrarContenido: nat ==> ()
  CifrarContenido(clave) ==
      contenido := [if charToAscii(contenido(i)) >= charToAscii('a') and charToAscii(contenido(i)) <= charToAscii('z')
                    then asciiToChar(((charToAscii(contenido(i)) - charToAscii('a') + clave) mod 26) + charToAscii('a'))
                    else contenido(i)
                    | i in set inds contenido]
  pre clave in set {0, ..., 25};


  private charToAscii: char ==> nat
  charToAscii(c) ==
    return if c = 'a' then 97
           elseif c = 'b' then 98
           elseif c = 'c' then 99
           elseif c = 'd' then 100
           elseif c = 'e' then 101
           elseif c = 'f' then 102
           elseif c = 'g' then 103
           elseif c = 'h' then 104
           elseif c = 'i' then 105
           elseif c = 'j' then 106
           elseif c = 'k' then 107
           elseif c = 'l' then 108
           elseif c = 'm' then 109
           elseif c = 'n' then 110
           elseif c = 'o' then 111
           elseif c = 'p' then 112
           elseif c = 'q' then 113
           elseif c = 'r' then 114
           elseif c = 's' then 115
           elseif c = 't' then 116
           elseif c = 'u' then 117
           elseif c = 'v' then 118
           elseif c = 'w' then 119
           elseif c = 'x' then 120
           elseif c = 'y' then 121
           elseif c = 'z' then 122
           else 0;  -- Retornar 0 para caracteres no válidos

  private asciiToChar: nat ==> char
  asciiToChar(n) ==
    return if n = 97 then 'a'
           elseif n = 98 then 'b'
           elseif n = 99 then 'c'
           elseif n = 100 then 'd'
           elseif n = 101 then 'e'
           elseif n = 102 then 'f'
           elseif n = 103 then 'g'
           elseif n = 104 then 'h'
           elseif n = 105 then 'i'
           elseif n = 106 then 'j'
           elseif n = 107 then 'k'
           elseif n = 108 then 'l'
           elseif n = 109 then 'm'
           elseif n = 110 then 'n'
           elseif n = 111 then 'o'
           elseif n = 112 then 'p'
           elseif n = 113 then 'q'
           elseif n = 114 then 'r'
           elseif n = 115 then 's'
           elseif n = 116 then 't'
           elseif n = 117 then 'u'
           elseif n = 118 then 'v'
           elseif n = 119 then 'w'
           elseif n = 120 then 'x'
           elseif n = 121 then 'y'
           elseif n = 122 then 'z'
           else ' ';  -- Retornar espacio para caracteres no válidos
end Mensaje
